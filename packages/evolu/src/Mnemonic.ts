import * as Brand from "@effect/data/Brand";
import { pipe } from "@effect/data/Function";
import * as Effect from "@effect/io/Effect";

/**
 * Mnemonic is a password generated by Evolu in BIP39 format.
 *
 * A mnemonic, also known as a "seed phrase," is a set of 12 words in a
 * specific order chosen from a predefined list. The purpose of the BIP39
 * mnemonic is to provide a human-readable way of storing a private key.
 */
export type Mnemonic = string & Brand.Brand<"Mnemonic">;

export interface InvalidMnemonicError {
  readonly _tag: "InvalidMnemonic";
}

// Dynamic because it's big and rarely used.
// Two files, because wordlists should never change.
const importBip39WithEnglish = Effect.allPar(
  Effect.promise(() => import("@scure/bip39")),
  Effect.promise(() => import("@scure/bip39/wordlists/english.js"))
);

// We don't care about offline because it's called only when a user needs to restore.
export const parse = (
  mnemonic: string
): Effect.Effect<never, InvalidMnemonicError, Mnemonic> =>
  pipe(
    importBip39WithEnglish,
    Effect.flatMap(([{ validateMnemonic }, { wordlist }]) =>
      validateMnemonic(mnemonic, wordlist)
        ? Effect.succeed(mnemonic as Mnemonic)
        : Effect.fail<InvalidMnemonicError>({ _tag: "InvalidMnemonic" })
    )
  );

// We don't care about offline because it's called only on the first load.
export const generate = (): Effect.Effect<never, never, Mnemonic> =>
  pipe(
    importBip39WithEnglish,
    Effect.map(
      ([{ generateMnemonic }, { wordlist }]) =>
        generateMnemonic(wordlist, 128) as Mnemonic
    )
  );
