import * as S from "@effect/schema/Schema";
import { Brand, Context, ReadonlyRecord } from "effect";
import { Kysely, SelectQueryBuilder } from "kysely";
import { Listener, Unsubscribe } from "./Store.js";

export interface Evolu<S extends Schema = Schema> {
  readonly subscribeError: (listener: Listener) => Unsubscribe;
  readonly getError: () => Error | null;

  readonly subscribeOwner: (listener: Listener) => Unsubscribe;
  readonly getOwner: () => Owner | null;

  readonly createQuery: (queryCallback: QueryCallback<S, Row>) => Query;
  //   readonly subscribeQuery: (
  //     query: Query | null
  //   ) => (listener: Listener) => Unsubscribe;
  //   readonly getQuery: (query: Query | null) => ReadonlyArray<Row> | null;
  //   readonly loadQuery: (query: Query) => Promise<ReadonlyArray<Row>>;

  // readonly subscribeSyncState: (listener: Listener) => Unsubscribe;
  // readonly getSyncState: () => SyncState;
  // readonly mutate: Mutate<S>;
  // readonly ownerActions: OwnerActions;
}

const Evolu = Context.Tag<Evolu>();

/**
 * Schema defines database schema.
 */
type Schema = ReadonlyRecord.ReadonlyRecord<{ id: Id } & Row>;

/**
 * Branded Id Schema for any table Id.
 * To create Id Schema for a specific table, use {@link id}.
 */
const Id = S.string.pipe(S.pattern(/^[\w-]{21}$/), S.brand("Id"));
type Id = S.To<typeof Id>;

type Row = ReadonlyRecord.ReadonlyRecord<RowValue>;

type RowValue = null | string | number | Uint8Array;

type Error = "a" | "b";

/**
 * `Owner` represents the Evolu database owner. Evolu auto-generates `Owner`
 * on the first run. `Owner` can be reset on the current device and restored
 * on a different one.
 */
interface Owner {
  /** The `Mnemonic` associated with `Owner`. */
  readonly mnemonic: Mnemonic;
  /** The unique identifier of `Owner` safely derived from its `Mnemonic`. */
  readonly id: OwnerId;
  /* The encryption key used by `Owner` derived from its `Mnemonic`. */
  readonly encryptionKey: Uint8Array;
}
const Owner = Context.Tag<Owner>();

/**
 * Mnemonic is a password generated by Evolu in BIP39 format.
 *
 * A mnemonic, also known as a "seed phrase," is a set of 12 words in a
 * specific order chosen from a predefined list. The purpose of the BIP39
 * mnemonic is to provide a human-readable way of storing a private key.
 */
type Mnemonic = string & Brand.Brand<"Mnemonic">;

/**
 * The unique identifier of `Owner` safely derived from its `Mnemonic`.
 */
type OwnerId = Id & Brand.Brand<"Owner">;

type QueryCallback<S extends Schema, QueryRow> = (
  db: KyselyWithoutMutation<SchemaForQuery<S>>
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => SelectQueryBuilder<any, any, QueryRow>;

type KyselyWithoutMutation<DB> = Pick<Kysely<DB>, "selectFrom" | "fn">;

type SchemaForQuery<S extends Schema> = {
  readonly [Table in keyof S]: NullableExceptOfId<
    {
      readonly [Column in keyof S[Table]]: S[Table][Column];
    } & CommonColumns
  >;
};

type NullableExceptOfId<T> = {
  readonly [K in keyof T]: K extends "id" ? T[K] : T[K] | null;
};

interface CommonColumns {
  readonly createdAt: SqliteDate;
  readonly createdBy: Owner["id"];
  readonly updatedAt: SqliteDate;
  readonly isDeleted: SqliteBoolean;
}

/**
 * SQLite doesn't support the Date type, so Evolu uses SqliteDate instead.
 * Use the {@link cast} helper to cast SqliteDate from Date and back.
 * https://www.sqlite.org/quirks.html#no_separate_datetime_datatype
 */
const SqliteDate = S.string.pipe(
  S.filter((s) => !isNaN(Date.parse(s)), {
    message: () => "a date as a string value in ISO format",
    identifier: "SqliteDate",
  }),
  S.brand("SqliteDate")
);
type SqliteDate = S.To<typeof SqliteDate>;

/**
 * SQLite doesn't support the boolean type, so Evolu uses SqliteBoolean instead.
 * Use the {@link cast} helper to cast SqliteBoolean from boolean and back.
 * https://www.sqlite.org/quirks.html#no_separate_boolean_datatype
 */
const SqliteBoolean = S.union(S.literal(0), S.literal(1));
type SqliteBoolean = S.To<typeof SqliteBoolean>;

type Query = string & Brand.Brand<"Query">;

/**
 * A helper for casting types not supported by SQLite.
 * SQLite doesn't support Date nor Boolean types, so Evolu emulates them
 * with {@link SqliteBoolean} and {@link SqliteDate}.
 *
 * ### Example
 *
 * ```
 * // isDeleted is SqliteBoolean
 * .where("isDeleted", "is not", cast(true))
 * ```
 */
export function cast(value: boolean): SqliteBoolean;
export function cast(value: SqliteBoolean): boolean;
export function cast(value: Date): SqliteDate;
export function cast(value: SqliteDate): Date;
export function cast(
  value: boolean | SqliteBoolean | Date | SqliteDate
): boolean | SqliteBoolean | Date | SqliteDate {
  if (typeof value === "boolean") return value === true ? 1 : 0;
  if (typeof value === "number") return value === 1;
  if (value instanceof Date) return value.toISOString() as SqliteDate;
  return new Date(value);
}

/**
 * A factory function to create {@link Id} Schema for a specific table.
 *
 * ### Example
 *
 * ```
 * import * as Schema from "@effect/schema/Schema";
 * import * as Evolu from "evolu";
 *
 * const TodoId = Evolu.id("Todo");
 * type TodoId = Schema.To<typeof TodoId>;
 *
 * if (!Schema.is(TodoId)(value)) return;
 * ```
 */
export const id = <T extends string>(
  table: T
): S.BrandSchema<string, string & Brand.Brand<"Id"> & Brand.Brand<T>> =>
  Id.pipe(S.brand(table));
